@implements IDisposable
@inherits BlazorStateComponent
@inject GlobalAppState GlobalAppState
@inject IJSRuntime jsRuntime

<div class="row">
    <Employees.Components.Group Title="Manager" List=@Manager></Employees.Components.Group>
    <Employees.Components.Group Title="Peers" List=@PeerList></Employees.Components.Group>
    <Employees.Components.Group Title="Team" List=@TeamList></Employees.Components.Group>
</div>

<!-- Modal -->
<div class="modal fade" id="sendMessage" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Message</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body pb-0">
                <textarea class="col border-0" placeholder="What do you have to say?" @bind=@Message></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick=@Send data-dismiss="modal">Send</button>
            </div>
        </div>
    </div>
</div>

<div class="toast-container">
    @if (AppState != null)
    {
        @foreach (var toast in AppState.ToastItems)
        {
            <Employees.Components.Toast Item=@toast></Employees.Components.Toast>
        }
    }
</div>

@code {

    protected AppState AppState => GetState<AppState>();

    protected ChatClient ChatClient { get; set; }

    protected IEnumerable<F0601161Row> Manager => GlobalAppState.Employees
        .Where(e => e.F0601161_AN8 == AppState.Employee.F0601161_ANPA);

    protected IEnumerable<F0601161Row> TeamList => GlobalAppState.Employees
                .Where(e => e.F0601161_ANPA == AppState.Employee.F0601161_AN8);

    protected IEnumerable<F0601161Row> PeerList => GlobalAppState.Employees
                .Where(e => e.F0601161_ANPA == AppState.Employee.F0601161_ANPA && e.F0601161_AN8 != AppState.Employee.F0601161_AN8);

    protected long LastMessageId { get; set; }

    protected void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        if (e.MessageId > LastMessageId && e.UserId != AppState.Employee.F0601161_AN8)
        {
            Mediator.Send(new AddToastAction { Header = e.Username, Body = e.Message });
            LastMessageId = e.MessageId;
        }
    }

    protected string Message { get; set; }

    async protected Task Send()
    {
        if (Message != string.Empty)
        {
            await ChatClient.Send(Message);
        }
    }


    async protected override Task OnInitAsync()
    {
        await base.OnInitAsync();
        try
        {
            ChatClient = new ChatClient(AppState.Employee.F0601161_AN8, AppState.Employee.F0601161_ALPH, jsRuntime);
            ChatClient.MessageReceived += MessageReceived;
            await ChatClient.Start();
        }
        catch
        {
        }
    }

    async new public void Dispose()
    {
        if (ChatClient != null)
        {
            await ChatClient.Stop();
            ChatClient.Dispose();
            ChatClient = null;
            base.Dispose();
        }
        base.Dispose();
    }

}
